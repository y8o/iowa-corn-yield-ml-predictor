# Iowa Corn Yield ML Project Implementation Guide

## Project Overview
**Goal**: Build a machine learning model to predict corn yields across Iowa's 99 counties using climate data
**Time**: 2-3 hours
**Key Skills**: ML modeling, agricultural data, climate analysis, geospatial visualization

## Data Sources & APIs

### 1. USDA NASS QuickStats API (Corn Yield Data)
```python
# Free API - no key required for basic queries
base_url = "https://quickstats.nass.usda.gov/api/api_GET/"
params = {
    'key': 'DEMO_KEY',  # Use DEMO_KEY for testing
    'source_desc': 'SURVEY',
    'sector_desc': 'CROPS',
    'group_desc': 'FIELD CROPS',
    'commodity_desc': 'CORN',
    'class_desc': 'GRAIN',
    'prodn_practice_desc': 'ALL PRODUCTION PRACTICES',
    'util_practice_desc': 'GRAIN',
    'statisticcat_desc': 'YIELD',
    'unit_desc': 'BU / ACRE',
    'agg_level_desc': 'COUNTY',
    'state_name': 'IOWA',
    'year__GE': '2013'  # Last 10+ years
}
```

### 2. NOAA Climate Data
```python
# Iowa Environmental Mesonet (IEM) - Free access
# Station data for temperature, precipitation, GDD
iem_base = "https://mesonet.agron.iastate.edu/cgi-bin/request/asos.py"

# Or use NOAA Climate Data Online API
noaa_base = "https://www.ncdc.noaa.gov/cdo-web/api/v2/"
```

### 3. Iowa County Boundaries
```python
# Use geopandas with natural earth or census data
import geopandas as gpd
iowa_counties = gpd.read_file("https://www2.census.gov/geo/tiger/GENZ2020/shp/cb_2020_19_county_20m.zip")
```

## Implementation Steps

### Step 1: Data Collection (30 minutes)
```python
import pandas as pd
import requests
import geopandas as gpd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns
import folium

# 1. Get corn yield data by county/year
def get_usda_data():
    # Implementation for USDA NASS API calls
    pass

# 2. Get climate data (temperature, precipitation, GDD)
def get_climate_data():
    # Implementation for climate data collection
    pass
```

### Step 2: Feature Engineering (45 minutes)
Create meaningful agricultural features:
- **Growing Degree Days (GDD)**: Accumulated heat units during growing season
- **Precipitation totals**: April-September growing season
- **Temperature extremes**: Max/min during critical periods
- **Drought indicators**: Consecutive dry days
- **Seasonal patterns**: Early/late season conditions

```python
def calculate_gdd(temp_max, temp_min, base_temp=50, max_temp=86):
    """Calculate Growing Degree Days for corn"""
    avg_temp = (temp_max + temp_min) / 2
    gdd = np.maximum(0, np.minimum(avg_temp - base_temp, max_temp - base_temp))
    return gdd

def create_features(climate_df):
    # Aggregate by county and growing season
    features = climate_df.groupby(['county', 'year']).agg({
        'temp_max': ['mean', 'max'],
        'temp_min': ['mean', 'min'], 
        'precipitation': ['sum', 'max'],
        'gdd': 'sum'
    }).reset_index()
    return features
```

### Step 3: Model Building (30 minutes)
```python
# Prepare data
X = features[['gdd_sum', 'precip_sum', 'temp_mean', 'temp_extremes']]
y = yield_data['yield_bu_per_acre']

# Split and train
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Random Forest model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Predictions and evaluation
predictions = rf_model.predict(X_test)
mae = mean_absolute_error(y_test, predictions)
r2 = r2_score(y_test, predictions)
```

### Step 4: Visualization & Analysis (45 minutes)
1. **Feature Importance Plot**
2. **Actual vs Predicted Scatter Plot** 
3. **Iowa County Map** with yield predictions
4. **Time Series** of actual vs predicted yields
5. **Climate Impact Analysis**

```python
# Interactive map with Folium
def create_yield_map(predictions_df, iowa_counties):
    m = folium.Map(location=[42.0, -93.5], zoom_start=7)
    
    # Choropleth map of predicted yields
    folium.Choropleth(
        geo_data=iowa_counties,
        data=predictions_df,
        columns=['county_fips', 'predicted_yield'],
        key_on='feature.properties.GEOID',
        fill_color='YlOrRd',
        legend_name='Predicted Corn Yield (Bu/Acre)'
    ).add_to(m)
    
    return m
```

## Expected Results
- **Model Accuracy**: 80-90% R² score
- **Key Features**: GDD typically most important, followed by growing season precipitation
- **Insights**: Identify counties most sensitive to climate variability
- **Visualizations**: 4-5 compelling plots showing model performance and agricultural insights

## File Structure
```
iowa-corn-yield-ml-predictor/
├── README.md
├── requirements.txt
├── data/
│   ├── raw/
│   └── processed/
├── notebooks/
│   └── corn_yield_analysis.ipynb
├── src/
│   ├── data_collection.py
│   ├── feature_engineering.py
│   ├── modeling.py
│   └── visualization.py
├── results/
│   ├── model_performance.png
│   ├── feature_importance.png
│   ├── yield_predictions_map.html
│   └── iowa_corn_analysis_report.pdf
└── models/
    └── trained_rf_model.pkl
```

## Pro Tips for Quick Implementation
1. **Start Simple**: Use demo data first, then scale to full dataset
2. **Focus on Growing Season**: April-September data only
3. **Handle Missing Data**: Use county averages or interpolation
4. **Quick Wins**: Use pre-calculated GDD if available from Iowa Mesonet
5. **Validation**: Use recent years (2022-2023) as holdout test set

## Documentation Notes
- Emphasize agricultural domain knowledge (GDD, growing seasons)
- Show understanding of climate-crop relationships  
- Include model interpretation and business insights
- Mention potential applications for precision agriculture

This project directly demonstrates your ability to work with agricultural data, climate modeling, and ML - exactly what Regrow needs!
